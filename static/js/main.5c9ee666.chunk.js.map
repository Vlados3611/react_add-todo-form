{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","getUserById","usersFromServer","find","App","useState","inputTitle","setInputTitle","selectUser","setSelectUser","isInputChecked","setInputCheck","isSelectChecked","setSelectCheck","todosFromServer","todosCopy","addUserPost","checkTodoForm","prevTodo","Math","max","Number","action","method","type","value","onChange","event","target","placeholder","disabled","selected","onClick","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c9ee666.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\n\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\n\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user !== null && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\n\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (userId: number): User | null => {\n  const foundUser = usersFromServer.find(\n    (user) => user.id === userId,\n  );\n\n  return foundUser || null;\n};\n\nexport const App = () => {\n  const [inputTitle, setInputTitle] = useState('');\n  const [selectUser, setSelectUser] = useState('');\n  const [isInputChecked, setInputCheck] = useState(true);\n  const [isSelectChecked, setSelectCheck] = useState(true);\n\n  const todos = todosFromServer.map(\n    (todo) => ({\n      ...todo,\n      user: getUserById(todo.userId),\n    }),\n  );\n\n  const [todosCopy, addUserPost] = useState(todos);\n\n  const handleUserPost = () => {\n    addUserPost(prevTodo => [\n      ...prevTodo,\n      {\n        id: Math.max(...prevTodo.map((todo) => todo.id)),\n        title: inputTitle,\n        completed: false,\n        userId: Number(selectUser),\n        user: getUserById(Number(selectUser)),\n      },\n    ]);\n  };\n\n  const resetChanges = () => {\n    setInputTitle('');\n    setSelectUser('');\n  };\n\n  const checkTodoForm = () => {\n    if (!inputTitle) {\n      setInputCheck(false);\n    } else {\n      setInputCheck(true);\n    }\n\n    if (!selectUser) {\n      setSelectCheck(false);\n    } else {\n      setSelectCheck(true);\n    }\n\n    if (inputTitle && selectUser) {\n      handleUserPost();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={inputTitle}\n            onChange={(event) => {\n              const { value } = event.target;\n\n              setInputTitle(value);\n            }}\n            placeholder=\"Enter a title\"\n          />\n          {\n            !isInputChecked && (\n              <span className=\"error\">Please enter a title</span>\n            )\n          }\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectUser}\n            onChange={(event) => {\n              const { value } = event.target;\n\n              setSelectUser(value);\n            }}\n          >\n            <option\n              value=\"\"\n              disabled\n              selected\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map((user) => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {\n            !isSelectChecked && (\n              <span className=\"error\">Please choose a user</span>\n            )\n          }\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={(event) => {\n            event.preventDefault();\n            checkTodoForm();\n            resetChanges();\n          }}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosCopy} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}